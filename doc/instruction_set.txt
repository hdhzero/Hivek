32 bits

arith instructions
p s 0ifooo cccc dddd ssss tttt v rr iiiii
p s 0ifooo cccc dddd ssss iiiiiiiiiiii
where
    p - parallel (1) or not (0)
    s - 16 bits (0) or 32 (1)
    i - between registers (0) or reg and immd (1)
    f - update flags (1) or not (0)
    c - condition flags
    v - shift comes from immd(0) or register(1)

    ooo - add, sub, adc, sbc, and, or, nor, xor
    rr  - sll, slr, ror, sar

jump instructions
p s 10lrcp cccc iiii iiii iiiiiiiiiiii
p s 10lrcp iiii iiii iiii iiiiiiiiiiii
where
    l - link (1) or not (0)
    r - jump value from immd (0) or from reg (1)
    c - use cond flags (1) or not (0)
    p - branch is probably taken (1) or not taken (0)

memory instructions
p s 110ttt cccc dddd ssss iiiiiiiiiiii
where
    ttt - lw, sw, lh, lhu, sh, lb, lbu, sb

p s 11110t cccc dddd iiiiiiiiiiiiiiii
where
    t - load multiple registers (0) or store multiple registers (1)

Undef instructions
1110tt
11111t

16 bits
arith
p s 0iooo ddd rrr ttt
p s 0iooo ddd iii iii
where
    i - regs (0) or immd (1)

jmp
p s 10pcccc iii iiii

memory
p s 1110t dddd tttt
where
    t - lw (0) or sw(1)


0 0 00000 000 000000
p s 1111t ddd iiiiii
    t - lw (0) or sw(1) relative to fp

others
p s 110tt dddd tttt
p s 110tt ddd iiiiii
where
    00 - mov
    01 - cmp
    10 - mov immd
    11 - cmp immd


